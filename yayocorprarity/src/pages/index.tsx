import { type NextPage } from "next";
import Head from "next/head";
import React, {
  FormEvent,
  useState,
  FunctionComponent,
  useEffect,
} from "react";

type TokenRarityEntry = {
  value: string;
  occurence: number;
  rarityScore: number;
};

import TraitCounts from "../data/traitCounts.json";

interface ITraitCounts {
  [key: string]: { [key: string]: number };
}

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>YayoCorp Rarity Viewer - BECAUSE YOU NEED TO FLEX</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-neutral-900 py-8 text-white">
        <h1 className="font-bold">YayoCorp Rarity Viewer</h1>
        <a
          href="https://twitter.com/spuro69"
          target="_blank"
          className="italic hover:text-blue-300"
        >
          by @spuro69
        </a>
        <a
          href="https://github.com/spuro/rarityFetchAndDisplay"
          target="_blank"
          className="hover:text-blue-300"
        >
          This pages repository
        </a>
        <img
          src="https://yayo.fund/img/yayo/logo_full/logo-pink.png"
          className="h-48"
          alt="YayoCorp Logo"
        />
        <a
          href="https://www.google.com/search?q=testosterone+supplement"
          className="text-center italic hover:text-blue-300"
        >
          Looking up your rarity to price accordingly?
          <br />
          Click here!
        </a>
        <SpecificIdDisplay />
        <TopRanked />
        <TraitViewer />
        <p>I&apos;ll add more features later</p>
      </main>
    </>
  );
};

const SpecificIdDisplay: FunctionComponent = () => {
  interface TokenScores {
    rarityScore: number;
    occurence: number;
    value: string;
  }

  interface TokenRarityEntry {
    rarity: TokenScores[];
    rank: number;
  }

  const [tokenScores, setTokenScores] = useState<TokenScores[]>();
  const [scoreRanking, setScoreRanking] = useState<number>(0);
  const [error, setError] = useState("");
  const [currentID, setCurrentID] = useState<number | null>(null);

  const processIdRarityFetch = (e: FormEvent<HTMLFormElement>) => {
    type IdDesired = {
      id_desired: string;
    };

    e.preventDefault();
    const data = new FormData(e.target as HTMLFormElement);
    const json: IdDesired = JSON.parse(
      JSON.stringify(Object.fromEntries(data.entries()))
    ) as IdDesired;

    setCurrentID(parseInt(json.id_desired));

    if (json.id_desired.length === 0) {
      setError("Enter something idiot");
      return;
    } else if (isNaN(parseInt(json.id_desired))) {
      setError("Enter a number idiot");
      return;
    } else if (parseInt(json.id_desired) > 4000) {
      setError("There's only 4000 idiot");
    } else {
      setError("");
      fetch(`/api/rarity/${json.id_desired}`)
        .then((res) => {
          res
            .json()
            .then((json: TokenRarityEntry) => {
              setTokenScores(json.rarity);
              setScoreRanking(json.rank);
            })
            .catch((err) => {
              console.log(err);
            });
        })
        .catch((err) => {
          console.log(err);
        });
    }
  };

  return (
    <div className="mt-[50px] flex w-4/5 flex-col rounded-md bg-neutral-950 p-4">
      <p className="text-center text-3xl font-bold">LOOK UP BY TOKEN ID</p>
      <form
        onSubmit={(e) => {
          processIdRarityFetch(e);
        }}
        className="flex flex-col gap-2 text-center text-lg"
      >
        <label>Enter token # here</label>
        <input type="text" name="id_desired" className="text-black" />
        <button>Submit</button>
      </form>
      {error.length > 0 ? <p className="text-red-600">{error}</p> : ""}
      <div className="grid w-full grid-cols-2">
        <div className="flex w-full flex-col items-center justify-center bg-red-600">
          <p className="text-lg">RANK</p>
          <p className="text-4xl">{scoreRanking}</p>
          <p>/4000</p>
        </div>
        <div className="flex items-center justify-center bg-red-900">
          <img
            src={currentID ? `https://yayo.fund/yayo_nft/${currentID}.png` : ""}
            className="w-[400px]"
          />
        </div>
      </div>
      <p className="py-2 text-center italic">
        &quot;Rank&quot; is based off of rarity score. Read more{" "}
        <a
          href="https://raritytools.medium.com/ranking-rarity-understanding-rarity-calculation-methods-86ceaeb9b98c"
          target="_blank"
          className="text-blue-300"
        >
          here.
        </a>
      </p>
      <div className="grid grid-cols-3 p-2">
        {tokenScores
          ? Object.entries(tokenScores).map(([key, entry], index) => {
              if (entry.value !== "totalScore") {
                return (
                  <>
                    <div className="bg-red-900 text-center" key={index}>
                      <div className="flex h-full w-full flex-col border-2 p-2">
                        <p className="font-bold">{key}</p>
                        <div className="flex flex-col">
                          <p>
                            {entry.occurence
                              ? `${(100 * entry.occurence).toFixed(2)}%`
                              : ""}
                          </p>
                          <p>
                            {entry.rarityScore
                              ? entry.rarityScore.toFixed(2)
                              : ""}
                          </p>
                        </div>
                      </div>
                    </div>
                  </>
                );
              }
            })
          : ""}
      </div>
    </div>
  );
};

const TopRanked: FunctionComponent = () => {
  interface IScoreEntry {
    id: number;
    value: number;
  }

  const [currentIndex, setCurrentIndex] = useState<number>(0);
  const [topScores, setTopScores] = useState<IScoreEntry[]>();

  useEffect(() => {
    fetch(`/api/top/${currentIndex}`)
      .then((res) => {
        res
          .json()
          .then((json: IScoreEntry[]) => {
            setTopScores(json);
          })
          .catch((err) => {
            console.log(err);
          });
      })
      .catch((err) => {
        console.log(err);
      });
  }, [currentIndex]);

  const handleChangeIndex = (_change: number) => {
    if (currentIndex + _change < 0) {
      setCurrentIndex(0);
    } else if (currentIndex + _change > 3990) {
      setCurrentIndex(3990);
    } else {
      setCurrentIndex(currentIndex + _change);
    }
  };

  return (
    <div className="mt-[50px] flex w-4/5 flex-col rounded-md bg-neutral-950 p-4 text-center">
      <p className="text-3xl font-bold">RARITY LEADERBOARD</p>
      <div className="grid grid-cols-3 py-2 text-2xl">
        <p
          className="cursor-pointer hover:text-red-500"
          onClick={() => handleChangeIndex(-10)}
        >
          {"<--"}
        </p>
        <p className="">
          {currentIndex + 1} - {currentIndex + 10}
        </p>
        <p
          className="cursor-pointer hover:text-red-500"
          onClick={() => handleChangeIndex(10)}
        >
          {"-->"}
        </p>
      </div>
      <div className="flex w-full flex-col gap-1">
        {topScores
          ? topScores.map((entry, index) => {
              return (
                <div className="grid grid-cols-3" key={index}>
                  <div className="flex items-center justify-center">
                    <p key={index} className="text-3xl">
                      Rank {currentIndex + index + 1}
                    </p>
                  </div>
                  <div className="flex flex-col items-center justify-center gap-5">
                    <p key={index} className="text-3xl">
                      YAYO Man #{entry.id}
                    </p>
                    <div className="flex flex-col">
                      <p>Trait score:</p>
                      <p key={index} className="text-3xl">
                        {entry.value ? entry.value.toFixed(2) : ""}
                      </p>
                    </div>
                  </div>
                  <img
                    src={`https://yayo.fund/yayo_nft/${entry.id}.png`}
                    className="h-48"
                    alt="YayoCorp Logo"
                  />
                </div>
              );
            })
          : ""}
      </div>
    </div>
  );
};

const TraitViewer: FunctionComponent = () => {
  const traitCounts = TraitCounts as ITraitCounts;

  return (
    <div className="mt-[50px] flex w-4/5 flex-col rounded-md bg-neutral-950 p-4 text-center">
      <p className="text-3xl font-bold">TRAIT COUNTS</p>
      <p className="italic">In order of rarest to most common, by trait.</p>
      {Object.entries(TraitCounts).map(([key, count], index) => {
        return (
          <div className="grid grid-cols-2" key={index}>
            <div className="flex items-center justify-center">
              <p key={index} className="text-3xl">
                {key}
              </p>
            </div>
            <div className="flex flex-col items-center justify-center gap-5">
              <p key={index} className="text-3xl">
                {count}
              </p>
            </div>
          </div>
        );
      })}
    </div>
  );
};

export default Home;
